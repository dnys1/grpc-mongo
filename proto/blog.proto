syntax = "proto3";

// Service for creating, reading, updating, and deleting Blog items.
package blog;
option go_package = "github.com/dnys1/grpc-mongo/internal/model/blogpb";

// From https://github.com/googleapis/googleapis
import "google/api/annotations.proto";

message Blog {
    string id = 1;
    string author_id = 2;
    string title = 3;
    string content = 4;
}

// A request with the blog to create in the database
message CreateBlogRequest {
    // The blog item to create in the database
    Blog blog = 1;
}

// A response with the newly-created blog
message CreateBlogResponse {
    // The newly created blog with a set ID field
    Blog blog = 1;
}

// A request with the blog id to read from the database
message ReadBlogRequest {
    // The blog's database identifier
    string id = 1;
}

// A response with the blog item and a status code.
message ReadBlogResponse {
    // The blog, if successfully found in the database.
    // This will be null if not found.
    Blog blog = 1;
    
    // The status of reading the blog from the database.
    // This will be NOT_FOUND when the blog couldn't be 
    // retrieved or FOUND when it could. Defaults to UNKNOWN
    // in cases of internal errors or unimplemented code.
    ReadStatus status = 2;

    // The status of reading the blog from the database.
    enum ReadStatus {
        UNKNOWN = 0;
        NOT_FOUND = 1;
        FOUND = 2;
    }
}

// A request with the blog info to update
message UpdateBlogRequest {
    // The new blog data to replace the old data.
    // It is important to specify the ID so that 
    // the old blog can be located.
    Blog blog = 1;
}

// A response after an update request is called.
message UpdateBlogResponse {
    // The status of the update operation.
    UpdateStatus status = 1;

    enum UpdateStatus {
        UNKNOWN = 0;
        NOT_UPDATED = 1;
        UPDATED = 2;
    }
}

// A request to delete a blog from the database
message DeleteBlogRequest {
    // The id of the blog to delete.
    string id = 1;
}

// A response to a DeleteBlog call, with the status of the call.
message DeleteBlogResponse {
    // The status of the delete operation.
    DeleteStatus status = 1;

    enum DeleteStatus {
        UNKNOWN = 0;
        NOT_DELETED = 1;
        DELETED = 2;
    }
}

// A request to list blogs in the database.
message ListBlogsRequest {}

// A response with all the blogs in the database.
message ListBlogsResponse {
    // A blog in the database.
    Blog blog = 1;
}

// Service for interacting with the Blog DB using a CRUD-style API.
service BlogService {
    // Create a blog in the database
    rpc CreateBlog (CreateBlogRequest) returns (CreateBlogResponse) {
        option (google.api.http) = {
            post: "/api/v1/blogs",
            body: "*"
        };
    };

    // Read a blog from the database
    rpc ReadBlog (ReadBlogRequest) returns (ReadBlogResponse) {
        option (google.api.http) = {
            get: "/api/v1/blogs/{id}"
        };
    };

    // Update a blog in the database
    rpc UpdateBlog (UpdateBlogRequest) returns (UpdateBlogResponse) {
        option (google.api.http) = {
            put: "/api/v1/blogs/{blog.id}",
            body: "*"
        };
    };

    // Delete a blog from the database
    rpc DeleteBlog (DeleteBlogRequest) returns (DeleteBlogResponse) {
        option (google.api.http) = {
            delete: "/api/v1/blogs/{id}"
        };
    };

    // List the blogs on the server
    rpc ListBlogs (ListBlogsRequest) returns (stream ListBlogsResponse) {
        option (google.api.http) = {
            get: "/api/v1/blogs"
        };
    };
}